{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dynautomate","text":"<p>Workflows for parametric DOE for LS-DYNA on HPC.  This package is still a work in progress.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>work in progress\n</code></pre>"},{"location":"#project-overview","title":"Project Overview","text":"<p>The objective of this python package is to provide a set of tools for building workflows to set up parametric LS-DYNA simulations in an HPC environment.  The object structure of the package follows the same structure as the LS-DYNA keyword input files:</p> <pre><code>keyfile\n|-keyword 1\n| |-card 1\n| |-card 2\n| |-card 3\n|-keyword 2\n| |-card 1\n| |-card 2\n|-etc...\n</code></pre>"},{"location":"#parameter-editing","title":"Parameter editing","text":"<p>An initial keyword file is loaded in.  Subsequently, individual keywords and cards can be located and edited or replaced to create new parametric copies of the simulation:</p> <pre><code>\nimport dynautomate as dyna\n\n#load the keyword file\nfile=dyna.KeywordFile(\"/path/to.k\",\"fixed\")\n\n#create a keyword object\nt_term=file.get_keywords(\"CONTROL_TERMINATION\")\n\n#edit a card in the keyword object\nt_term.edit_card(0,0,0.01)\n\n#insert updated keyword into the keyword file\nf.replace_keyword(t_term)\n\n#write new keyword file\nf.write_keyfile(\"/path/to_new.k\")\n\n</code></pre>"},{"location":"#mesh-editing","title":"Mesh editing","text":"<p>In addition to editing properties, basic parametric mesh changes can be performed using transformations:</p> <pre><code>import dynautomate as dyna\n\n#initialize empty transformation operator\ntransform_operator=keyfile.Transformation()\n\n#add translation by 2 in x direction\ntransform_operator.translate(2,0,0)\n\n#add scale y by 5\ntransform_operator.scale(0,5,0)\n\n#rotate by 90 degrees about arbitrary axis\ntransform_operator.rotate([0,0,0],[1,5,6],90)\n\n#import a long format keyword file\nkeyword_file=keyfile.KeywordFile(\"example_keyword.k\",\"long\")\n\n#retrieve nodes\nkeyfile_nodes=keyword_file.get_nodes()\n\n#define node set to be transformed\nnode_set=[0,1,2,3,100]\n\n#apply transformation to nodes\nkeyfile_nodes.transform(node_set,transform_operator)\n\n#write to keyfile and write output\nkeyword_file.replace_keyword(keyfile_nodes)\nkeyword_file.write_keyfile(\"new_keyword.k\")\n\n</code></pre> <p>For details on the full features of each object type, refer to each object documentation page at the top</p>"},{"location":"keyfile/","title":"Keyfile","text":"<p>The keyfile object contains and manages the contents of the entire LS-DYNA solver deck.  Methods for this object are used to extract subsets of interest for iteration, to replace values in the keyword deck, and to write subsequent iterations of the original file.</p>"},{"location":"keyfile/#attributes","title":"Attributes","text":""},{"location":"keyfile/#methods","title":"Methods","text":""},{"location":"keyfile/#init","title":"init","text":"<p>Initialize a new keyword file object from a file input</p> <pre><code>class KeywordFile:\n    def __init__(self, path, format):\n\n\nf=KeywordFile(\"/path/to.k\",\"fixed\")\n\n</code></pre> <p>inputs</p> Attribute Type Description path String Path to keyword file format String Keyword file type, \"short\" (comma separated), \"fixed\" (standard PrePost format), or \"Long\" (double length PrePost format) <p>returns</p> <p>KeywordFile object</p>"},{"location":"keyfile/#info","title":"info","text":"<p>prints debugging information about the keyword file</p> <pre><code>def info(self)\n\nf=KeywordFile(\"/path/to.k\",\"fixed\")\nf.info()\n\n&gt;&gt;Keyword file\n&gt;&gt;Title: LS-DYNA Keyword Input\n&gt;&gt;File length: 1000\n&gt;&gt;Number of keywords: 4\n&gt;&gt;Keyword locations: [10,52,100,516]\n\n</code></pre> <p>inputs</p> <p>None.</p> <p>returns</p> <p>Prints the keyword file name (*TITLE keyword), file length (# characters), number of individual keywords, and the location of the starting character of each keyword.</p>"},{"location":"keyfile/#get_keywords","title":"get_keywords","text":"<p>Retrieve all keywords of a specified type</p> <pre><code>def get_keywords(self, keyword_title):\n\nf=KeywordFile(\"/path/to.k\",\"short\")\n\nelastic_mat_mods=f.get_keywords(\"MAT_ELASTIC\")\n\n</code></pre> <p>inputs</p> Attribute Type Description keyword_title String keyword to search for, optional to include the \"*\" keyword delimeter <p>returns</p> <p>Returns Keyword object (one matching keyword found) or list of Keyword objects (multiple matching keywords found)</p>"},{"location":"keyfile/#get_nodes","title":"get_nodes","text":"<p>Create a Nodes object with all nodes in the keyword file</p> <pre><code>def get_nodes(self):\n\nf=KeywordFile(\"/path/to.k\",\"short\")\n\nf_nodes=f.get_nodes()\n\n</code></pre> <p>inputs</p> <p>None.</p> <p>returns</p> <p>Returns a Nodes object (special keyword type) with the node numbers and coordinates stored in numpy array format.</p>"},{"location":"keyfile/#replace_keyword","title":"replace_keyword","text":"<p>Replace an existing keyword in the solver deck with a new one.</p> <pre><code>def replace_keyword(self, keyword_to_replace):\n\nf=KeywordFile(\"/path/to.k\",\"short\")\n\nelastic_mat_mods=f.get_keywords(\"MAT_ELASTIC\")\n\nnew_mat_mod=elastic_mat_mods[0].edit_card(0,0,1)\n\nf.replace_keyword(new_mat_mod)\n\n</code></pre> <p>inputs</p> Attribute Type Description keyword_to_replace Keyword object Updated keyword containing the replacement context information <p>returns</p> <p>Updates the KeywordFile object string and keywordlocation information.</p>"},{"location":"keyfile/#replace_card","title":"replace_card","text":"<p>Replace an existing card in the solver deck with a new one.</p> <pre><code>def replace_keyword(self, card_to_replace):\n\nf=KeywordFile(\"/path/to.k\",\"short\")\n\nelastic_mat_mods=f.get_keywords(\"MAT_ELASTIC\")\n\nnew_mat_card_one=elastic_mat_mods[0].get_card\n\nnew_mat_card_one.edit(0,0,1)\n\nf.replace_card(new_mat_card_one)\n\n</code></pre> <p>inputs</p> Attribute Type Description card_to_replace Card object Updated Card containing the replacement context information <p>returns</p> <p>Updates the KeywordFile object string and keywordlocation information.</p>"},{"location":"keyfile/#write_keyfile","title":"write_keyfile","text":"<p>Writes a new keyword file output to the specified directory.</p> <pre><code>def write_keyfile(self, path):\n\nf=KeywordFile(\"/path/to.k\",\"short\")\n\nelastic_mat_mods=f.get_keywords(\"MAT_ELASTIC\")\n\nnew_mat_mod=elastic_mat_mods[0].edit_card(0,0,1)\n\nf.replace_keyword(new_mat_mod)\n\nf.write_keyfile(\"/path/to_new.k\")\n\n</code></pre> <p>inputs</p> Attribute Type Description path String File path to preferred output location <p>returns</p> <p>New .k file in specified directory.</p>"}]}